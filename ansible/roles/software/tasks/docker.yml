# Docker installation
# Source: https://docs.docker.com/engine/install/ubuntu/
---
- name: '[Docker] Remove old docker system packages'
  become: true
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent

- name: '[Docker] Install required dependencies'
  become: true
  ansible.builtin.apt:
    update_cache: true
    name: "{{ item.key }}"
    state: "{{ item.value }}"
  loop: "{{ docker_dependencies | dict2items }}"

- name: '[Docker] Add signing key'
  become: true
  ansible.builtin.apt_key:
    url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    state: present

- name: '[Docker] Add repository into sources list'
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
    filename: docker

- name: '[Docker] Update apt cache'
  become: true
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true
    cache_valid_time: 3600

- name: '[Docker] Ensure docker packages are installed as latest/present'
  become: true
  when: item.value in ['latest', 'present']
  ansible.builtin.apt:
    update_cache: true
    name: "{{ item.key }}"
    state: "{{ item.value }}"
  loop: "{{ docker_packages | dict2items }}"

- name: '[Docker] Ensure docker packages are installed in particular versions'
  become: true
  when: item.value not in ['latest', 'present', 'absent']
  ansible.builtin.apt:
    update_cache: true
    name: "{{ item.key }}={{ item.value }}"
  loop: "{{ docker_packages | dict2items }}"

- name: '[Docker] Start docker daemon' # noqa: args[module]
  become: true
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
    use: "{{ service_manager }}"
